\documentclass[a4paper]{report}
\usepackage{RJournal,bm,subfig}
\usepackage[round]{natbib}
\bibliographystyle{abbrvnat}
\newcommand{\argmin}{\text{argmin}}
\newcommand{\argmax}{\text{argmax}}
\newcommand{\tr}{\text{tr}}
\newcommand{\Edist}{d_E}
\newcommand{\Rdist}{d_R}
\newcommand{\ProjMean}{\widehat{\bm S}_E}
\newcommand{\ProjMedian}{\widetilde{\bm S}_E}
\newcommand{\GeoMean}{\widehat{\bm S}_R}
\newcommand{\GeoMedian}{\widetilde{\bm S}_R}
%% load any required packages here

\begin{document}

%% do not edit, for illustration only
\fancyhf{}
\fancyhead[LO,RE]{\textsc{Contributed Article}}
\fancyhead[RO,LE]{\thepage}
\fancyfoot[L]{The R Journal Vol. X/Y, Month, Year}
\fancyfoot[R]{ISSN 2073-4859}

%% replace RJtemplate with your article
\begin{article}

\title{\pkg{rotations}: A Package for $SO(3)$ Data}
\author{by Bryan Stanfill, Heike Hofmann, Ulrike Genschel}

\maketitle

<<setup, include=FALSE, cache=FALSE>>=
  # this is equivalent to \SweaveOpts{...}
opts_chunk$set(fig.path='figures/', fig.align='center', fig.show='hold')
options(replace.assign=TRUE,width=90)
library(rotations)
library(ggplot2)
@

\abstract{
In this article we introduce the \pkg{rotations} package which provides users the ability to simulate, analyze and visualize data in $SO(3)$.  No package as complete as this one is currently available.  We offer four distributions from which to simulate data, four estimators of the central orientation and a novel approach to visualizing these data.  All of the above features are available to three different parameterizations of rotations: 3-by-3 matrix form, quaternions and Euler angles.
}

\section{Introduction}

The data in form of three-dimensional rotations find application in several scientific areas, such as biomedical engineering, computer visioning, and geological and materials sciences.  A common goal shared by these fields is to estimate the main or central orientation, denoted $\bm S$, given a sample of rotations.  That is, letting the rotation group $SO(3)$ denote the collection of all $3\times 3$ rotation matrices, observations $\bm{R}_1,\ldots,\bm{R}_n \in SO(3)$ can be conceptualized as a random sample from a \textit{location model}
\begin{equation}
\label{eqn:1}
\mathbf{R}_i = \bm{S} \bm{E}_i, \quad i=1,\ldots,n,
\end{equation}
where $\bm S \in SO(3)$ is the {\it fixed} parameter of interest indicating an orientation of central tendency, and $\bm{E}_1,\ldots,\bm{E}_n \in SO(3)$ denote i.i.d. {\it random} rotations which symmetrically perturb $\bm{S}$.

The \pkg{rotations} package provides users with the tools necessary to simulate data from four common choices of symmetric distributions, estimate $\bm{S}$ in \ref{eqn:1} and visualize a sample of rotations.  The remainder of this paper is organized as follows.  We will begin with a discussion on how rotation data can be parameterized.  Then we discuss how data generation is possible in this package.  Next we discuss the different estimators used to estimate the central direction.  Finally, visualizations of rotation data is presented.

%For example, \citet{rancourt00} examine rotation matrix data in studying body positions whilst operating machinery. \cite{fletcher09} consider this type of  orientation data in magnetic resonance imaging and in shape analysis; similar examples  can be found in \cite{schwartz05}, \cite{pierrynowski09},  \cite{dai10},  or \cite{hadani11}.  The data in our illustrative example to follow arise from a study in materials science, where $3 \times 3$ rotations represent the orientations of cubic crystals on the micro-surface of a metal specimen as measured through electron backscatter diffraction (EBSD) and ``grains" within metals are composed of crystals which roughly share a common orientation; see \cite{randle03} for details on EBSD data.  
     
%From a sample of orientations, an important interest is often the estimation of a main or central orientation $\bm S$.  That is, letting the rotation group $SO(3)$ denote the collection of all $3\times 3$ rotation matrices, observations $\bm{R}_1,\ldots,\bm{R}_n \in SO(3)$ can be conceptualized as a random sample from a \textit{location model}
%\begin{equation}
%\label{eqn:1}
%\mathbf{R}_i = \bm{S} \bm{E}_i, \quad i=1,\ldots,n,
%\end{equation}
%where $\bm S \in SO(3)$ is the {\it fixed} parameter of interest indicating an orientation of central tendency, and $\bm{E}_1,\ldots,\bm{E}_n \in SO(3)$ denote iid {\it random} rotations which symmetrically perturb $\bm{S}$. The data-generating model in \eqref{eqn:1} is a rotation-matrix analog of a location model for scalar data $Y_i = \mu + e_i$, where $\mu \in \mathbb{R}$ denotes a mean and $e_i \in \mathbb{R}$ denotes an additive error symmetrically distributed around zero.  This representation \eqref{eqn:1} for orientations is quite common and, in fact, a variety of parametric models exist for describing symmetrically distributed rotations $\bm{E}_i$, such as the symmetric matrix Fisher distribution \citep{downs72}, the symmetric Cayley distribution \citep{leon06}  and the circular-von-Mises-based rotation distribution \citep{bingham09}   in the statistics literature, as well as the Bunge distribution \citep{bunge82}, the isotropic Gaussian distribution \citep{matthies88, savyolova95} and the de la Vall\'{e}e Poussin distribution \citep{Schaeben97} in the materials science literature. Our goal in the following is to summarize and compare the most frequently proposed approaches for point estimation of $\bm S$ based on sample \eqref{eqn:1} of orientation data.  Depending on the scientific literature, the approaches can be quite different.

%The topic of location estimation has received considerable attention for directional data on circles or spheres, \citep[see][]{fisher53, karcher77, khatri77, fisher85, ducharme87, bajaj88, liu92, chan93, mardia00}, but less is known about  estimator properties with rotation data.  As a compounding factor, several current approaches to estimating $\bm S$ have arisen out of literatures having differing statistical and geometrical emphases.  In the  applied sciences literature, estimators of $\bm S$ are typically based on distance measures involving {\it non-Euclidean} (i.e., Riemannian) geometry, such as the \emph{geometric mean} \citep{arun87, horn88, umeyama91, moakher02} or, more recently, the \emph{geometric median} \citep{fletcher08, fletcher09}.  Preferences may depend on outliers in the data, but such suggestions for estimating $\bm S$ often do {\it not} consider the potential impact of the underlying data-generating mechanism.   On the other hand, approaches in the statistical literature tend to motivate an estimator for $\bm S$  through likelihood or moment-estimation principles applied to a specifically assumed distributional model (e.g., matrix Fisher or Cayley distribution) for the symmetric rotation errors $\bm E_i$ \citep{downs72, jupp79, leon06, bingham10}. Almost always, this estimator turns out to be a \emph{projected arithmetic mean} based on {\it Euclidean} geometry. Hence, in addition to potential distributional assumptions, more fundamental divisions in estimation approaches may be attributable to different geometrical perspectives with rotation data.  

%Considering the potential effects of an underlying data generation model as well as the choice of geometry (i.e., Euclidean vs.~Riemannian), the above discussion indicates a need to investigate and identify good point estimators for rotation data.  In particular, because estimators in the applied sciences literatures  are often selected without decision-theoretical considerations based on underlying distributions, it is of interest to understand how different location estimators behave across common distributions for rotations.  In this paper, we evaluate four common estimators for $\bm S$ in the context of the location model \eqref{eqn:1}. These are either mean- or median-based, and either Euclidean- or Riemannian-based in geometry; the median- and Euclidean-based estimator is new here but its inclusion is natural and its performance can be generally quite good and (as will be evidenced) broadly recommendable.   Through simulation, we compare how these estimators perform with respect to three common probability models for symmetric rotation errors as defined in \eqref{eqn:1}, namely the circular-von Mises-based distribution, the symmetric matrix Fisher distribution and the symmetric Cayley distribution.  The matrix Fisher is arguably the most common distribution in the statistics literature \citep[see][]{chikuse03}. While not noted previously, the symmetric Cayley and the de la Vall\'{e}e Poussin distribution are in fact the same; the de la Vall\'{e}e Poussin distribution has been advocated in the material science literature \citep{Schaeben97}.   The circular-von Mises-based distribution is included because the distribution is non-regular and has been applied to EBSD data \citep{bingham09}.  We describe how error distribution structures for rotation data, in particular their variability and tail behavior, translate into performance differences among point estimators based on varying geometric considerations.

\section{Rotation Representations}

The variety of applications for rotations is echoed by the number of equivalent ways to parameterize them.  We consider three of the most popular: matrices in $SO(3)$, unit quaternions and Euler angles.  

\subsection{Matrix Form}

Three-dimensional rotations can be represented by $3\times3$ orthogonal matrices with determinant one.  All matrices with these characteristics form a group called the {\it special orthogonal group}, or {\it rotation group}, denoted $SO(3)$.  Every element in $SO(3)$ can be described by an angle, $r\in[0,\pi)$ and an axis, $\bm U\in\mathbb{R}^3$ with $||\bm U||=1$. Thus $\bm{R}\in SO(3)$ can be thought of as rotating the coordinate axis, $\bm{I}_{3 \times 3}$, about the axis $\bm{U}$ by the angle $r$.  We adopt the material scientist's terminology in calling $r$ the misorientation angle and $\bm U$ the misorientation axis.

More specifically, given an angle, $r$, and axis, $\bm U$, a $3\times 3$ rotation matrix can be formed by
\begin{equation}\label{eqn:angleaxis}
 \bm{R} = \bm{R}(r,\bm{u}) = \bm{u}\bm{u}^\top+(\bm{I}_{3\times3}-\bm{u}\bm{u}^\top)\cos(r) +\Phi(\bm{u})\sin(r)
\end{equation}
where
\[
\Phi(\bm{u}) = \Phi (u_1,u_2,u_3) = \left(\begin{array}{ccc}0 & -u_3 & u_2 \\ u_3 & 0 & -u_1 \\-u_2 & u_1 & 0\end{array}\right).
\]

The function \code{SO3} will form the rotation matrix corresponding to a given angle and axis of rotation.  One can also go the other direction with the functions \code{angle} and \code{axis}, which will return the angle and axis, respectively, for a given rotation matrix.  

% Next, \ref{eqn:angleaxis} can be used with the following facts to find $\bm u$: $\bm{uu}^\top$ and $(\bm{I}_{3\times3}-\bm{u}\bm{u}^\top)$ are symmetric, $\Phi(\bm u)$ is skew-symmetric implying $\Phi(\bm u)^\top=-\Phi(\bm u)$.  Now form $\bm R-\bm R^\top$:
% \[
% \bm R-\bm R^\top=\Phi(\bm u)\sin(r)-\Phi(\bm u)^\top\sin(r)=2\sin(r)\Phi(\bm u).
% \]
% Now let $\bm V=2\sin(r)\Phi(\bm u)$ then by the definition of $\Phi(\cdot)$, $u_1=-\bm V_{2,3}/2\sin(r)$, $u_2=\bm V_{1,3}/2\sin(r)$ and $u_3=-\bm V_{1,2}/2\sin(r)$.  The function \code{axis} will perform this calculation.

\subsection{Quaternion Form}

A second parameterization of rotations is with a {\it quaternion} of unit length.  Quaternions are a form of imaginary numbers with one real entry and a vector of three imaginary parts that can be expressed as
\[
q = x_1 + x_2 i + x_3 j + x_4 k
\]
where $i,j,$ and $k$ are square roots of -1, i.e. $i^2 = j^2= k^2 = -1$.  We can write $q=(s,v)$ as tuple of the scalar $s$ for coefficient {\bf 1} and vector $\bm v$ for the imaginary coefficients, i.e. $s=x_1$ and $v= (x_2, x_3, x_4)$.

A rotation around axis $\bm U$ by angle $r$ translates to $q=(s,v)$ with
\[
s = \cos{(r/2)},  \ \ \bm v = \bm U \sin {(r/2)}
\]
This makes $q$ a unit quaternion.  To form a quaternion given an angle and axis, use the function \code{Q4}.

As with the matrix representation the \code{angle} and \code{axis} functions will extract an angle and axis from a quaternion.  One can use the functions to form a matrix from a quaternion, or simply use the function \code{SO3} with a \code{Q4} object as input.  Similarly, an object of class \code{SO3} can be made into a rotation matrix by using the \code{Q4} function.

%This form is popular with mathematicians and others interested in the theory of rotations because their form makes them simple to deal with in certain situations.

\subsection{Euler Angles}
The final parameterization we consider is \code{Euler angles}.  Euler angles are three dimensional vectors describing a sequence of rotations of some fixed coordinate axis.  There are several versions of Euler angles and we consider the $z-x-z$ formulation.  That is, if $(\alpha,\beta,\gamma)$ is an Euler angle for $\alpha,\gamma\in[0,2\pi]$, and $\beta\in[0,\pi]$, rotate the $z$-axis counterclockwise through $\alpha$ radians, then rotate the $x$-axis through $\beta$ radians and finally rotate the $z$-axis through $\gamma$ radians.

As before the function \code{axis} and \code{angle} will extract the axis and angle of the Euler angle.  One can also translate an Euler angle into a quaternion or matrix by passing an \code{EA} object into \code{Q4} and \code{SO3}, respectively.  One can go the other direction too.

All of the functions in \pkg{rotations} will work with any of these representations.  For the remainder of this article, however, we will present our work using the matrix representation as the other representations work analogously.

\section{Data generation}

Using \eqref{eqn:1} one can simulate a matrix $\bm{E}_i\in SO(3)$ by picking an axis $\bm U$ uniformly on the sphere then drawing an angle $r$ from a distribution symmetric about $0$ and bounded between $-\pi$ and $\pi$ then applying \eqref{eqn:angleaxis}.  A matrix generated in this fashion is said to belong to the \dfn{uniform-axis random spin}, or UARS, class of distributions \citep{bingham09}.  The choice of angular distribution distinguishes between members of this class.


The \pkg{rotate} package allows the user access to four members of the UARS class differentiated by the distributional models on $r$: the uniform distribution on the circle, the symmetric matrix Fisher \citep{langevin05, downs72, khatri77, jupp79}, the symmetric Cayley  \citep{Schaeben97, leon06} and a circular-von Mises-based distribution \citep{bingham09}. 

%A general construction approach exists for random rotations that are symmetrically distributed around the identity matrix $\bm{I}_{3 \times 3}$; see \citet{watson83, bingham09} and \citet{hielscher10}.  To this end, let $\bm{U}\in\mathbb{R}^3$ represent a point chosen uniformly on the unit sphere and, independently, generate a random angle $r$ according to some circular density $C(r|\kappa)$ on $(-\pi,\pi]$, which is symmetric around 0 and where $\kappa$ denotes a concentration parameter governing the spread of the circular distribution.  Then, define a random rotation as $\bm{E}=\bm{E}(\bm{U},r)$ using the constructive definition (\ref{eqn:angleaxis}) (i.e., $\bm{E}$ represents the position of $\bm{I}_{3\times 3}$ upon rotating the standard coordinate frame in $\mathbb{R}^3$ about the random axis $\bm{U}$ by the random angle $r$).  The resulting rotation $\bm{E}$ will be symmetrically distributed and its distributional type (i.e., matrix Fisher, Cayley or circular-von Mises-based) is determined by the form of the circular density $C(r|\kappa)$ for the (misorientation) angle $r$.

The uniform distribution on the circle is given by the following density function
\begin{equation}\label{eqn:haar}
C_\mathrm{{H}}(r)=\frac{1-\cos(r)}{2\pi}
\end{equation}
for $r\in(-\pi,\pi]$.  This function also plays the part of a measure on the sphere, called the Haar measure on the sphere.  The function \code{rhaar} with input \code{n} will draw a sample of size $n$ from \ref{eqn:haar} and \code{dhaar} with evaluate the density at a given point.

The following three distributions have only one parameter, $\kappa$, which is the concentration parameter.  As $\kappa$ increases, the distribution becomes more peaked about $0$ and less variable.  If one would prefer to specify the variability instead, the circular variance denoted $\nu$ can also be set by the user.  For $r\sim F$ where $F$ is a distribution on the circle, the circular variance is defined as $\nu=1-E\cos(r)$, and $E\cos(r)$ is called the mean resultant length \citep{mardia00}.

The symmetric matrix Fisher distribution is the oldest and also the most difficult to sample from.  It takes on the following distributional form
\[
C_\mathrm{{F}}(r| 
\kappa)=\frac{1}{2\pi[\mathrm{I_0}(2\kappa)-\mathrm{I_1}(2\kappa)]}e^{2\kappa\cos(r)}[1-\cos(r)]
\]
where $\mathrm{I_p}(\cdot)$ denotes the Bessel function of order $p$ defined as  $\mathrm{I_p}(\kappa)=\frac{1}{2\pi}\int_{-\pi}^{\pi}\cos(pr)e^{\kappa\cos r}dr$.  

For a given $\kappa$, the function \code{rfisher} generates a sample of size $n$ from this distribution using a rejection algorithm and \code{dfisher} evaluates the density at a given angle $r$.

\citet{leon06} proposed the symmetric Cayley distribution, which is identical to the de la Vall\'{e}e Poussin distribution and a favorite among material scientists \citep{Schaeben97}.  This distribution is closely related to the beta distribution and has the distributional form
\[
C_\mathrm{C}(r |\kappa)=\frac{1}{\sqrt{\pi}} \frac{\Gamma(\kappa+2)}{\Gamma(\kappa+1/2)}2^{-(\kappa+1)}(1+\cos r)^\kappa(1-\cos r).
\]
\code{rcayley} simulates from this distribution by taking a simple transformation of random deviates from a beta distribution and \code{dcayley} evaluates the Cayley density at a given angle, $r$.

Finally the circular-von Mises-based distribution is included because the distribution is non-regular and has been applied to EBSD data \citep{bingham09}.  An angle following this distribution has the distribution form
\[
C_\mathrm{M}(r|\kappa)=\frac{1}{2\pi \mathrm{I_0}(\kappa)}e^{\kappa\cos(r)}.
\]
Simulation from this distribution was developed by \citet{best79} and the function \code{rvmises} follows this procedure closely.  Also, \code{dvmises} evaluates the density at a given angle, $r$.

Once an angular distribution has been chosen and a vector of $n$ angles of rotation have been generated, the \code{genR} function with option \code{space="SO3"} creates an $n\times 9$ matrix representing a sample from the appropriate UARS member as demonstrated in the following code.  If quaternions or Euler angles are desired the options \code{space} can be changed to \code{"Q4"} and \code{"R3"}, respectively.

<<genRs,background='white',highlight=FALSE>>=
rs<-rcayley(20,1)
Rs<-genR(rs)
R1<-matrix(Rs[1,],3,3)
is.SO3(R1)
@

Here \code{rcayley(20,1)} simulates $r_1,\ldots,r_{20}$ from  $C_\mathrm{C}(r |\kappa=1)$ then \code{genR} generates the matrices.  Each row of \code{Rs} is an element in $SO(3)$, as demonstrated by \code{is.SOn}, in vector form with central orientation $\bm I_{3\times 3}$.  Any other central orientation in $SO(3)$ is possible by changing the \code{S} option.  If a central orientation not in $SO(3)$ is proposed, however, an error is returned.

\section{$SO(3)$ data analysis\label{section:analysis}}

Given a sample of $n$ observations $\bm R_1,\dots,\bm R_{n}$ generated according to \eqref{eqn:1} we offer four ways to estimate the matrix $\bm S$, i.e. the central orientation.  These estimators are either Riemannian- or Euclidean-based in geometry and either mean- or median-based.  First we discuss how the choice of geometry affects distance.

The choice of geometry results in two different metrics to measure the distance between rotation matrices $\bm{R}_1$ and $\bm{R}_2 \in SO(3)$. Under the embedding approach, the natural distance metric between two random matrices in the Euclidean distance, $\Edist$, is induced by the Frobenius norm 
\begin{equation}
\label{d_E}
\Edist(\bm{R}_1,\bm{R}_2)=\|\bm{R}_1-\bm{R}_2\|_F, 
\end{equation}
where $\|\bm{A}\|_F = \sqrt{\mathbf{tr}({\bm A^\top \bm A})}$ denotes the Frobenius norm of a matrix $\bm A$ and $\mathbf{tr}(\cdot)$ denotes the trace of a matrix.  The Euclidean distance between two rotation matrices corresponds to the shortest cord in $\mathcal{M}(3)$ that connects them.  If $r\in[-\pi,\pi)$ denotes the misorientation angle in the angle-axis representation (\ref{eqn:angleaxis}) of $\bm{R}_1^\top \bm{R}_2 \equiv \bm{R}_1^\top \bm{R}_2(r,\bm{U})$ (so that $\mathbf{tr}(\bm{R}_1^\top \bm{R}_2) =1 +2 \cos r$), then $\Edist(\bm{R}_1,\bm{R}_2) = 2\sqrt{(1-\cos r)}$ holds.

By staying in the Riemannian space $SO(3)$ under the intrinsic approach, the natural distance metric becomes the Riemannian (or geodesic) distance, $\Rdist$, by which the distance between two rotations $\bm{R}_1,\bm{R}_2\in SO(3)$  is  defined as 
\begin{equation}
\label{d_R}
\Rdist(\bm{R}_1,\bm{R}_2)=  \frac{1}{\sqrt{2}}||\text{Log}(\bm{R}_1^\top\bm{R}_2)||_F = |r|,
\end{equation}
where $\text{Log}(\bm{R})$ denotes the principle logarithm of $\bm{R}$ (i.e., $\text{Log}(\bm{R}) = \text{Log}(\bm{R}(\bm U,r))= \bm \Phi(r\bm U)$ in \eqref{eqn:angleaxis}) and $r\in[-\pi,\pi)$ is the misorientation angle of $\bm{R}_1^\top \bm{R}_2$.  The Riemannian distance corresponds to the length of the shortest path that connects $\bm{R}_1$ and $\bm{R}_2$ {\it within} the space $SO(3)$. For this reason, the Riemannian distance is often considered the more natural metric on $SO(3)$; see \citet{moakher02} for this discussion along with more details on exponential/logarithmic operators related to $SO(3)$.

We first consider estimators based on the embedding approach, which we call the projected estimators.  The median-based estimator in this class is
\begin{equation}\label{est:med}
\ProjMedian=\argmin_{\bm{S}\in
SO(3)}\sum_{i=1}^n\Edist(\bm{R}_i,\bm{S}).
\end{equation}
The function \code{median} with option \code{type="projected"} approximates $\ProjMedian$ and uses an adaptation of the famous Weiszfeld algorithm \citep{weiszfeld37}.  The mean-based estimator is 
\begin{align}\label{est:pam}
\ProjMean&=\argmin_{\bm{S}\in
SO(3)}\sum_{i=1}^n\Edist^2(\bm{R}_i,\bm{S})\nonumber\\
&=\argmax_{\bm{S}\in
SO(3)}\tr(\bm{S}^{\top}\bar{\bm{R}})
\end{align}
and is computed by the function \code{mean} with option \code{type="projected"}.  For an in-depth discussion of the algorithm used to compute this value consult \citet{moakher02}.

The intrinsic estimators are referred to as geometric estimators and minimize the first and second order Riemannian distances.  The \dfn{geometric median} is 
\begin{equation}\label{est:lone}
\GeoMedian=\argmin_{\bm{S}\in
SO(3)}\sum_{i=1}^n\Rdist(\bm{R}_i,\bm{S});
\end{equation}
and is computed by the function \code{median} with option \code{type="intrinsic"} and uses the algorithm proposed by \citet{hartley11}.  The mean-based counterpart is 
\begin{equation}\label{est:ltwo}
\GeoMean=\argmin_{\bm{S}\in
SO(3)}\sum_{i=1}^n\Rdist^2(\bm{R}_i,\bm{S}).
\end{equation}
and is computed using the function \code{mean} with option \code{type="instrinsic"}.  The algorithm we use was first propsed by \citet{manton04}.

\section{Confidence Area Construction}

With limited theory available for estimators of the central orientation, a bootstrap method is proposed to estimate the uncertainty associated with them.  The procedure implemented by the function \code{CIradius} is as follows where $\widehat{\bm S}$ is any of the estimators discussed so far:
\begin{enumerate}
\item Estimate $\widehat{\bm S}$ from $(\bm R_1,\dots,\bm R_n)$ 
\item Sample $\bm R_1$,...,$\bm R_m$ from $(\bm R_1,\dots,\bm R_n)$ with replacement
\item Estimate $\widehat{\bm S}^*$ from bootstrap sample
\item Compute $\hat{T}=d_G(\widehat{\bm S},\widehat{\bm S}^*)$
\item Repeat steps 1-3 B times
\item Report q\% percentile of $\hat{T}$ to be the radius of the confidence `cone'
\end{enumerate}
A similar procedure was used by \cite{bingham10}, but in place of $d_R$ the maximum absolute angle between all three axis, which they called $\alpha$, was used.  It's easy to show that $\alpha$ is less than or equal to the geodesic distance between any two rotations making our method slightly more conservative.

\section{Visualizations}
In this section we introduce a method to visualize $SO(3)$ data via the the \pkg{ggplot2} package \citep{wickham09}.  The function \code{plot} takes as input a $n\times 9$ matrix of $SO(3)$ observations and returns a visualization of one of the three columns.  The user can specify which column to use with the \code{column} option, the default is one.

The four estimates of the central orientation given in the previous section can be plotted by setting \code{estimates_show=TRUE}.  The estimators are indicated by shape.  One can also center the data about any observation in $SO(3)$ by setting \code{center=S}.   Typically take \code{center=mean(Rs)}.  

<<eye,fig.width=6,fig.height=6,out.width='0mm',background='white',highlight=FALSE>>=
rs<-rvmises(50,0.001)
Rs<-genR(rs)
plot(Rs,center=mean(Rs,type='intrinsic'),show_estimates=T)
@


\begin{figure}
\centering
\includegraphics[width=.5\textwidth]{figures/eye}
\caption{\label{figure:eye1}
A plot of the a random sample from the von Mises-UARS distribution with $\kappa=0.01$.}
\end{figure}

In figure \ref{figure:eye1} a random sample of 50 matrices following the von Mises UARS distribution with $\kappa=0.01$ is plotted along with four estimates of the central orientation.  The code to produce this plot is also given.

\section{Summary}

This file is only a basic article template. For full details of \emph{The R Journal}
style and information on how to prepare your article for submission, see the
\href{http://journal.r-project.org/latex/RJauthorguide.pdf}{Instructions for Authors}.

\bibliography{StanfillHofmannGenschel}


\address{Bryan Stanfill\\
  Department of Statistics\\
  Iowa State University\\
  Ames, IA 50011}\\
\email{stanfill@iastate.edu}

\address{Heike Hofmann\\
  Department of Statistics\\
  Iowa State University\\
  Ames, IA 50011}\\
\email{hofmann@mail.iastate.edu}

\address{Ulrike Genschel\\
  Department of Statistics\\
  Iowa State University\\
  Ames, IA 50011}\\
\email{ulrike@mail.iastate.edu}
\end{article}

\end{document}